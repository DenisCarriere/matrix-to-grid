!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):r.matrixToGrid=e()}(this,function(){function r(r){if(!r)throw new Error("No obj passed");var t=e(r);if(t.length>1&&"number"==typeof t[0]&&"number"==typeof t[1])return t;throw new Error("Coordinate is not a valid Point")}function e(r){if(!r)throw new Error("No obj passed");var e;if(r.length?e=r:r.coordinates?e=r.coordinates:r.geometry&&r.geometry.coordinates&&(e=r.geometry.coordinates),e)return t(e),e;throw new Error("No valid coordinates")}function t(r){if(r.length>1&&"number"==typeof r[0]&&"number"==typeof r[1])return!0;if(Array.isArray(r[0])&&r[0].length)return t(r[0]);throw new Error("coordinates must only contain numbers")}function o(r,e,t){if(!e||!t)throw new Error("type and name required");if(!r||r.type!==e)throw new Error("Invalid input to "+t+": must be a "+e+", given "+r.type)}function n(r,e,t){if(!r)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!r||"Feature"!==r.type||!r.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!r.geometry||r.geometry.type!==e)throw new Error("Invalid input to "+t+": must be a "+e+", given "+r.geometry.type)}function i(r,e,t){if(!r)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!r||"FeatureCollection"!==r.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<r.features.length;o++){var n=r.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==e)throw new Error("Invalid input to "+t+": must be a "+e+", given "+n.geometry.type)}}function a(r,e){if(!r)throw new Error("No geometry passed");return{type:"Feature",properties:e||{},geometry:r}}function s(r,e){if(!r)throw new Error("No coordinates passed");if(void 0===r.length)throw new Error("Coordinates must be an array");if(r.length<2)throw new Error("Coordinates must be at least 2 numbers long");if("number"!=typeof r[0]||"number"!=typeof r[1])throw new Error("Coordinates must numbers");return a({type:"Point",coordinates:r},e)}function u(r,e){if(!r)throw new Error("No coordinates passed");for(var t=0;t<r.length;t++){var o=r[t];if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<o[o.length-1].length;n++)if(o[o.length-1][n]!==o[0][n])throw new Error("First and last Position are not equivalent.")}return a({type:"Polygon",coordinates:r},e)}function f(r,e){if(!r)throw new Error("No coordinates passed");return a({type:"LineString",coordinates:r},e)}function d(r){if(!r)throw new Error("No features passed");return{type:"FeatureCollection",features:r}}function p(r,e){if(!r)throw new Error("No coordinates passed");return a({type:"MultiLineString",coordinates:r},e)}function l(r,e){if(!r)throw new Error("No coordinates passed");return a({type:"MultiPoint",coordinates:r},e)}function w(r,e){if(!r)throw new Error("No coordinates passed");return a({type:"MultiPolygon",coordinates:r},e)}function h(r,e){if(!r)throw new Error("No geometries passed");return a({type:"GeometryCollection",geometries:r},e)}function c(r,e){var t=v[e||"kilometers"];if(void 0===t)throw new Error("Invalid unit");return r*t}function y(r,e){var t=v[e||"kilometers"];if(void 0===t)throw new Error("Invalid unit");return r/t}function m(r,e){var t=v[e||"kilometers"];if(void 0===t)throw new Error("Invalid unit");return r/t*57.2958}var g={geojsonType:o,collectionOf:i,featureOf:n,getCoord:r,getCoords:e,containsNumber:t},v={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373,feet:20908792.65},E={feature:a,featureCollection:d,geometryCollection:h,point:s,multiPoint:l,lineString:f,multiLineString:p,polygon:u,multiPolygon:w,radiansToDistance:c,distanceToRadians:y,distanceToDegrees:m},b=g.getCoord,M=E.point,P=E.distanceToRadians,C=function(r,e,t,o){var n=Math.PI/180,i=180/Math.PI,a=b(r),s=n*a[0],u=n*a[1],f=n*t,d=P(e,o),p=Math.asin(Math.sin(u)*Math.cos(d)+Math.cos(u)*Math.sin(d)*Math.cos(f)),l=s+Math.atan2(Math.sin(f)*Math.sin(d)*Math.cos(u),Math.cos(d)-Math.sin(u)*Math.sin(p));return M([i*l,i*p])},N=E.point,q=E.featureCollection,I=function(r,e,t,o){if(!r||!Array.isArray(r))throw new Error("matrix is required");if(!e)throw new Error("origin is required");Array.isArray(e)&&(e=N(e));for(var n=r[0].length,i=r.length,a=1;i>a;a++)if(r[a].length!==n)throw new Error("matrix requires all rows of equal size");o=o||{},o.zProperty=o.zProperty||"elevation";for(var s=[],u=0;i>u;u++){var f=C(e,t*u,0,o.units);o.properties&&(f.properties=o.properties),f.properties[o.zProperty]=r[i-1-u][0],s.push(f);for(var d=1;n>d;d++){var p=C(f,t*d,90,o.units);o.properties&&(p.properties=o.properties),p.properties[o.zProperty]=r[i-1-u][d],s.push(p)}}return q(s)};return I});